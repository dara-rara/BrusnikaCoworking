token:
  aes: yfUlESNWLkXxc+zPosFMFTqIALPaeiHvayLwJjKy9w0=
  signing:
    keyAccess: 53A73E5F1C4E0A2D3B5F2D784E6A1B423D6F247D1F6E5C3A596D635A75327855
#    timeAccess: 7200000
    timeAccess: 120000 #2 минуты
    keyRefresh: 53A73E5F1C4E0A2D3B5F2D784E6A1B423D6F247D1F6E5C3A596D635A7532785553A73E5F1C4E0A2D3B5F2D784E6A1B423D6F247D1F6E5C3A596D635A75327855
#    timeRefresh: 2592000000
    timeRefresh: 300000 #5 минут

spring:
  application:
    name: BrusnikaCoworking
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update

  datasource:
    url: jdbc:postgresql://${PGHOST:localhost}:${PGPORT:5432}/${POSTGRES_DB:brusnika}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:qaz%123%}
    driver-class-name: org.postgresql.Driver
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  mail:
    host: smtp.gmail.com
    port: 587
    username: brusnikacoworking@gmail.com
    password: jubd fbby uzmk hvwb
    properties:
      mail:
        smtp:
          auth: true
        smtp.starttls.enable: true
  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      bootstrap-servers: localhost:9092
      properties:
        spring:
          json:
            add:
              type:
                headers: false
    consumer:
      bootstrap-servers: localhost:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      properties:
        spring:
          json:
            add:
              type:
                headers: false
server:
  frontend-url: http://localhost:8080 #нужен front
