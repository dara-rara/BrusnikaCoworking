package com.example.BrusnikaCoworking.service;

import com.example.BrusnikaCoworking.adapter.web.auth.dto.KafkaMailMessage;
import com.example.BrusnikaCoworking.exception.EmailRegisteredException;
import com.example.BrusnikaCoworking.listener.MessageMode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class MailService {

    private final JavaMailSender mailSender;

    @Value("${server.frontend-url}")
    private String frontEndURL;

    @Async
    public void send(KafkaMailMessage kafkaMailMessage, MessageMode mode) {
        try {
            var mimeMessage = mailSender.createMimeMessage();
            var helper = new MimeMessageHelper(mimeMessage, true);

            if (mode == MessageMode.EMAIL_VERIFICATION) {
                var url = frontEndURL + "/verification?data=" + kafkaMailMessage.message();
//                helper.setText("<h5> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ --> " +
//                        "&#128073<a href=\"" + url + "\">–ñ–ú–Ø–ö</a>&#128072</h5>",true);
//                helper.addInline("imageId",
//                        new File("./src/main/resources/image.svg"));
                helper.setText("<div style=\"max-width: 550px; margin: 20px auto; " +
                        "border-radius: 15px; border: 1px solid #c5c5c5;\n" +
                        "background-color: #f9f9f9; padding: 20px; font-family: Arial, sans-serif;\"> " +
                        "<h3 style=\"color: #4A90E2;\">üéâ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üéâ</h3>" +
                        "<p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>" +
                        "<br>–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω –æ–±–ª–µ–≥—á–∏—Ç –≤–∞–º –∂–∏–∑–Ω—å. " +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p> " +
                        "<p style=\"text-align: center; padding: 20px;\">" +
                        "<a href=\"" + url + "\" style=\"padding: 15px 20px; background-color: #4A90E2; " +
                        "color: white; text-decoration: navy; border-radius: 5px;\">–ü–û–î–¢–í–ï–†–î–ò–¢–¨</a> " +
                        "</p>" +
                        "<p>–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,<br>–∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!</p>" +
                        "</div>",true);
                helper.setSubject("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
            } else {
                helper.setText(kafkaMailMessage.message(), true);
                helper.setSubject("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ë–†–£–°–ù–ò–ö–ê.–ö–û–í–û–†–ö–ò–ù–ì");
            }

            helper.setTo(kafkaMailMessage.email());
            helper.setFrom("–ë–†–£–°–ù–ò–ö–ê.–ö–û–í–û–†–ö–ò–ù–ì<glebova555dasha@gmail.com>");

            mailSender.send(mimeMessage);
            log.info("email send, msg: {}, mode: {}", kafkaMailMessage, mode);
        } catch (Exception e) {
            log.error("send mail error : {}", e.getMessage());
        }
    }
}
